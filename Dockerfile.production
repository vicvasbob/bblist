# Dockerfile optimizado para producción con multi-stage build
FROM node:20-alpine AS base

# Instala git y dependencias necesarias
RUN apk add --no-cache git

# Establece el directorio de trabajo
WORKDIR /app

# Clona el repositorio desde GitHub
RUN git clone https://github.com/vicvasbob/bblist.git .

# Stage 1: Instalar dependencias
FROM base AS deps
RUN npm ci --only=production && npm cache clean --force

# Stage 2: Builder
FROM base AS builder
RUN npm ci
RUN npx prisma generate
ENV NEXT_PRIVATE_TURBOPACK=0
ENV NODE_ENV=production
RUN npm run build

# Stage final: Runtime
FROM node:20-alpine AS runner
WORKDIR /app

# Instalar dependencias del sistema para Prisma
RUN apk add --no-cache openssl

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Copiar archivos necesarios desde el builder
COPY --from=builder /app/package*.json ./
COPY --from=builder /app/.next ./.next
COPY --from=builder /app/public ./public
COPY --from=builder /app/prisma ./prisma
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/src/locales ./src/locales

# Crear usuario no-root para seguridad
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Cambiar al usuario no-root
USER nextjs

# Exponer puerto
EXPOSE 3000

ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Comando por defecto que incluye migración y start
# Exponer el puerto
EXPOSE 3000

# Comando por defecto (se puede sobrescribir en docker-compose)
CMD ["npm", "start"]