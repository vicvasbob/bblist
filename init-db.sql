-- Crear el esquema babylist si no existe
CREATE SCHEMA IF NOT EXISTS babylist;

-- Crear tabla de usuarios en el esquema babylist
CREATE TABLE IF NOT EXISTS babylist."user" (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR NOT NULL,
  email VARCHAR NOT NULL UNIQUE,
  age INTEGER CHECK (age > 0 AND age < 150),
  phone VARCHAR,
  address VARCHAR,
  notes TEXT,
  is_admin BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);


CREATE TABLE babylist.products (
  id bigint generated by default as identity not null,
  name character varying null,
  description character varying null,
  url character varying null,
  active boolean null,
  reserved_by bigint null,
  created_at timestamp with time zone not null default now(),
  image_url character varying null,
  constraint products_pkey primary key (id),
  constraint products_reserved_by_fkey foreign KEY (reserved_by) references babylist."user" (id)
) TABLESPACE pg_default;

-- Índices y triggers opcionales
CREATE INDEX IF NOT EXISTS idx_user_email ON babylist."user"(email);
CREATE INDEX IF NOT EXISTS idx_user_created_at ON babylist."user"(created_at);

-- Trigger para actualizar updated_at
CREATE OR REPLACE FUNCTION babylist.update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE 'plpgsql';

DROP TRIGGER IF EXISTS update_user_updated_at ON babylist."user";
CREATE TRIGGER update_user_updated_at 
    BEFORE UPDATE ON babylist."user" 
    FOR EACH ROW 
    EXECUTE FUNCTION babylist.update_updated_at_column();
