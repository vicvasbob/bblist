version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: babylist-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: babylist
      POSTGRES_USER: babyuser
      POSTGRES_PASSWORD: babypass
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U babyuser -d babylist"]
      interval: 30s
      timeout: 10s
      retries: 5

  app:
    build: 
      context: .
      no_cache: true
    container_name: babylist-app
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql://babyuser:babypass@postgres:5432/babylist}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-https://TU-DOMINIO}
      GOOGLE_GEMINI_API_KEY: ${GOOGLE_GEMINI_API_KEY:-}
      NODE_ENV: production
    ports:
      - "3000:3000"
    restart: unless-stopped
    command: >
      sh -c "
        echo '=== BABYLIST STARTUP ===' &&
        echo 'Node: $(node --version)' &&
        echo 'NPM: $(npm --version)' &&
        if [ ! -f .next/BUILD_ID ]; then
          echo 'üî® Building application...' &&
          npm cache clean --force &&
          npm install &&
          npm list tailwindcss || echo 'TailwindCSS check failed' &&
          npx prisma generate &&
          NODE_ENV=production npm run build &&
          if [ -f .next/BUILD_ID ]; then
            echo '‚úÖ Build successful'
          else
            echo '‚ùå Build failed' && exit 1
          fi
        fi &&
        npx prisma migrate deploy &&
        npm start
      "

volumes:
  postgres_data:
    driver: local
